package Collections;

public class Threads_Concepts {
    
}


// ***********V.v.v.v.v.v.Imp prepare well this ****************


/*
  Before going into MultiThreading first understand Thread and process

  -> SO here will see first process:

     ‚ö° Process
‚úÖ A process is:

An instance of a program that is running.

It has its own memory, resources, and address space.

Managed by the Operating System (OS).

üîç Example:

When you run a Java program using java Test, the JVM itself runs as a process in your OS.


| **Stage**         | **What happens**                             | **Process & Thread context**                                                   |
| ----------------- | -------------------------------------------- | ------------------------------------------------------------------------------ |
| `javac Test.java` | Converts Java code ‚ûî Bytecode (`Test.class`) | No process or thread created here; just compilation                            |
| `java Test`       | Starts JVM process to execute Test.class     | **Process:** JVM created <br> **Thread:** main thread starts running your code |
| Bytecode          | Intermediate universal code for JVM          | Part of .class file, used by JVM process                                       |
| Machine code      | CPU-specific instructions generated by JVM   | CPU executes these instructions in the context of JVM process                  |
| CPU               | Executes machine code instructions           | Runs your program as a **process with threads inside it**                      |


-> In 1 process there can be multiple threads

-> Thread is nothing but smallest sequence of instructions that are exceuted by the CPU

-> Inside JVM there are number of memories like heap ,stack, code segmentation, etc

Steps that how program is exceuted:

 1.Create a process
 2.A new JVM instance is created


 üè† Process = House created by OS
üë®‚Äçüîß JVM instance = Electric system in the house (runs your devices/programs)

OS builds the house (process).

JVM sets up wiring, lights, fans (threads, memory) to make the house functional.

STep 1. Create a process

when you run 

java Test

Your Operating System (OS) creates a new process to run this command.

üîç What is this process?

It is the Java Virtual Machine (JVM) starting up.

The process is an instance of JVM running in your OS.

You can see it in Task Manager (Windows) or top command (Linux) as java.exe or java process.

üî• Step 2. A new JVM instance is created
‚úÖ What does this mean?

-> It has all memorries like heap, stack , data segment , code segment, Registers etc.

Inside this newly created process,
‚ûî JVM initializes itself to execute your program.

üîç What does JVM do here?

Loads the bytecode

Reads your compiled Test.class file (bytecode).

Creates the main thread

Starts the main thread to execute your main() method.
‚ûî Without this, your program cannot run.

Initializes runtime environment

Sets up method area, heap, stack memory, PC register, native method area internally to run your code.

Converts bytecode ‚ûî machine code

Using Interpreter or JIT Compiler.

Sends machine code to CPU for execution.

üí° Full Flow Summary (in easy words)
‚úÖ Run java Test ‚ûî OS creates a process ‚ûî JVM instance starts inside that process ‚ûî JVM loads your bytecode ‚ûî Creates main thread ‚ûî Converts bytecode to machine code ‚ûî CPU executes


-> Under each JVM instance there will be heap memory

   => under this threads created in this each thread have Register, stack, Counter
   => Register, stack, Counter -> these 3 will be there for every each thread

   -> he explain everything 28:27 timestamp in 33rd udemy 

-> context switching ****v.v.v.v. IMP *****  -> means where it stops i mean register completed 70% then it starts again from there only

-> Multitasking vs MultiThreading 

   => Multitasking -> different process
   => MultiThreading -> Inside the process
     

 */